/**
 * @name assembleHangul
 * @description
 * 인자로 받은 배열에 담긴 한글 문장과 문자를 한글 규칙에 맞게 합성합니다.
 * ```typescript
 * assembleHangul(
 *   // 한글 문자와 문장을 담고 있는 배열
 *   words: string[]
 * ): string
 * ```
 * @example
 * assembleHangul(['아버지가', ' ', '방ㅇ', 'ㅔ ', '들ㅇ', 'ㅓ갑니다']) // 아버지가 방에 들어갑니다
 * assembleHangul(['아버지가', ' ', '방에 ', '들어갑니다']) // 아버지가 방에 들어갑니다
 * assembleHangul(['ㅇ', 'ㅏ', 'ㅂ', 'ㅓ', 'ㅈ', 'ㅣ']) // 아버지
 */
declare function assembleHangul(words: string[]): string;

declare function chosungIncludes(x: string, y: string): boolean;

/**
 * @name combineHangulCharacter
 * @description
 * 인자로 초성, 중성, 종성을 받아 하나의 한글 문자를 반환합니다.
 * ```typescript
 * combineHangulCharacter(
 *   // 초성
 *   firstCharacter: string
 *   // 중성
 *   middleCharacter: string
 *   // 종성
 *   lastCharacter: string
 * ): string
 * ```
 * @example
 * combineHangulCharacter('ㄱ', 'ㅏ', 'ㅂㅅ') // '값'
 * combineHangulCharacter('ㅌ', 'ㅗ') // '토'
 */
declare function combineHangulCharacter(firstCharacter: string, middleCharacter: string, lastCharacter?: string): string;
/**
 * @name curriedCombineHangulCharacter
 * @description
 * 인자로 초성, 중성, 종성을 받아 하나의 한글 문자를 반환하는 `combineHangulCharacter` 함수의 커링된 버전입니다.
 * @example
 * const combineMiddleHangulCharacter = curriedCombineHangulCharacter('ㄱ')
 * const combineLastHangulCharacter = combineMiddleHangulCharacter('ㅏ')
 * combineLastHangulCharacter('ㄱ') // '각'
 */
declare const curriedCombineHangulCharacter: (firstCharacter: string) => (middleCharacter: string) => (lastCharacter?: string) => string;
/**
 * @name combineVowels
 * @description
 * 인자로 두 개의 모음을 받아 합성하여 겹모음을 생성합니다. 만약 올바른 한글 규칙으로 합성할 수 없는 모음들이라면 단순 Join합니다.
 * ```typescript
 * combineVowels(
 *   // 첫 번째 모음
 *   vowel1: string
 *   // 두 번째 모음
 *   vowel2: string
 * ): string
 * ```
 * @example
 * combineVowels('ㅗ', 'ㅏ') // 'ㅘ'
 * combineVowels('ㅗ', 'ㅐ') // 'ㅙ'
 * combineVowels('ㅗ', 'ㅛ') // 'ㅗㅛ'
 */
declare const combineVowels: (vowel1: string, vowel2: string) => string;

/**
 * @name convertQwertyToHangulAlphabet
 * @description
 * 영어 알파벳을 qwerty 자판과 매칭되는 한글 음소로 변환합니다.
 * @param word 한글 음소로 변환하고자 하는 영문
 * @returns 영어 알파벳이 포함되지 않은 한글 음소, 음절, 기타 문자로 이루어진 문자열
 */
declare function convertQwertyToHangulAlphabet(word: string): string;
/**
 * @name convertQwertyToHangul
 * @description
 * 영어 알파벳을 qwerty 자판과 매칭과는 한글 문자와 문장으로 변환합니다.
 * @param word 한글 문장으로 변환하고자 하는 영문
 * @returns qwerty 영어 알파벳을 변환하여 한글 규칙에 맞게 합성한 문자열
 */
declare function convertQwertyToHangul(word: string): string;

declare function disassembleHangulToGroups(str: string): string[][];
declare function disassembleHangul(str: string): string;

/**
 * 초성으로 올 수 있는 한글 글자
 */
declare const HANGUL_CHARACTERS_BY_FIRST_INDEX: readonly ["ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"];
/**
 * 중성으로 올 수 있는 한글 글자
 */
declare const HANGUL_CHARACTERS_BY_MIDDLE_INDEX: ("ㅏ" | "ㅐ" | "ㅑ" | "ㅒ" | "ㅓ" | "ㅔ" | "ㅕ" | "ㅖ" | "ㅗ" | "ㅗㅏ" | "ㅗㅐ" | "ㅗㅣ" | "ㅛ" | "ㅜ" | "ㅜㅓ" | "ㅜㅔ" | "ㅜㅣ" | "ㅠ" | "ㅡ" | "ㅡㅣ" | "ㅣ")[];
/**
 * 종성으로 올 수 있는 한글 글자
 */
declare const HANGUL_CHARACTERS_BY_LAST_INDEX: ("" | "ㄱ" | "ㄲ" | "ㄱㅅ" | "ㄴ" | "ㄴㅈ" | "ㄴㅎ" | "ㄷ" | "ㄹ" | "ㄹㄱ" | "ㄹㅁ" | "ㄹㅂ" | "ㄹㅅ" | "ㄹㅌ" | "ㄹㅍ" | "ㄹㅎ" | "ㅁ" | "ㅂ" | "ㅂㅅ" | "ㅅ" | "ㅆ" | "ㅇ" | "ㅈ" | "ㅊ" | "ㅋ" | "ㅌ" | "ㅍ" | "ㅎ")[];

interface ReturnTypeDisassembleCompleteHangulCharacter {
    first: (typeof HANGUL_CHARACTERS_BY_FIRST_INDEX)[number];
    middle: (typeof HANGUL_CHARACTERS_BY_MIDDLE_INDEX)[number];
    last: (typeof HANGUL_CHARACTERS_BY_LAST_INDEX)[number];
}
declare function disassembleCompleteHangulCharacter(letter: string): ReturnTypeDisassembleCompleteHangulCharacter | undefined;

declare function hangulIncludes(x: string, y: string): boolean;

type JosaOption = '이/가' | '을/를' | '은/는' | '으로/로' | '와/과' | '이나/나' | '이란/란' | '아/야' | '이랑/랑' | '이에요/예요' | '으로서/로서' | '으로써/로써' | '으로부터/로부터';
declare function josa(word: string, josa: JosaOption): string;
declare namespace josa {
    var pick: typeof josaPicker;
}
declare function josaPicker(word: string, josa: JosaOption): string;

/**
 * @name removeLastHangulCharacter
 * @description
 * 인자로 주어진 한글 문자열에서 가장 마지막 문자 하나를 제거하여 반환합니다.
 * ```typescript
 * removeLastHangulCharacter(
 *   // 한글 문자열
 *   words: string
 * ): string
 * ```
 * @example
 * removeLastHangulCharacter('안녕하세요 값') // 안녕하세요 갑
 * removeLastHangulCharacter('프론트엔드') // 프론트엔ㄷ
 * removeLastHangulCharacter('일요일') // 일요이
 */
declare function removeLastHangulCharacter(words: string): string;

/**
 * @name hasBatchim
 * @description
 * 한글 문자열의 마지막 글자가 받침이 있는지 확인합니다.
 * ```typescript
 * hasBatchim(
 *   // 글자에 받침이 있는지 확인하고 싶은 문자열
 *   str: string
 * ): boolean
 * ```
 * @example
 * hasBatchim('값') // true
 * hasBatchim('토') // false
 */
declare function hasBatchim(str: string): boolean;
/**
 * @name hasSingleBatchim
 * @description
 * 한글 문자열의 마지막 글자가 홑받침이 있는지 확인합니다.
 * ```typescript
 * hasSingleBatchim(
 *   // 글자에 받침이 있는지 확인하고 싶은 문자열
 *   str: string
 * ): boolean
 * ```
 * @example
 * hasSingleBatchim('갑') // true
 * hasSingleBatchim('값') // false
 * hasSingleBatchim('토') // false
 */
declare function hasSingleBatchim(str: string): boolean;
/**
 * @name getChosung
 * @description
 * 단어에서 초성을 추출합니다. (예: `사과` -> `'ㅅㄱ'`)
 * ```typescript
 * getChosung(
 *   // 초성을 추출할 단어
 *   word: string
 * ): string
 * ```
 * @example
 * getChosung('사과') // 'ㅅㄱ'
 * getChosung('리액트') // 'ㄹㅇㅌ'
 * getChosung('띄어 쓰기') // 'ㄸㅇ ㅆㄱ'
 */
declare function getChosung(word: string): string;
/**
 * @name getFirstConsonants
 * @deprecated getChosung을 사용해 주세요.
 * @description
 * 단어에서 초성을 추출합니다. (예: `사과` -> `'ㅅㄱ'`)
 * ```typescript
 * getFirstConsonants(
 *   // 초성을 추출할 단어
 *   word: string
 * ): string
 * ```
 * @example
 * getFirstConsonants('사과') // 'ㅅㄱ'
 * getFirstConsonants('리액트') // 'ㄹㅇㅌ'
 * getFirstConsonants('띄어 쓰기') // 'ㄸㅇ ㅆㄱ'
 */
declare function getFirstConsonants(word: string): string;
/**
 * @name canBeChosung
 * @description
 * 인자로 받은 문자가 초성으로 위치할 수 있는 문자인지 검사합니다.
 * ```typescript
 * canBeChosung(
 *   // 대상 문자
 *   character: string
 * ): boolean
 * ```
 * @example
 * canBeChosung('ㄱ') // true
 * canBeChosung('ㅃ') // true
 * canBeChosung('ㄱㅅ') // false
 * canBeChosung('ㅏ') // false
 * canBeChosung('가') // false
 */
declare function canBeChosung(character: string): character is (typeof HANGUL_CHARACTERS_BY_FIRST_INDEX)[number];
/**
 * @name canBeJungsung
 * @description
 * 인자로 받은 문자가 중성으로 위치할 수 있는 문자인지 검사합니다.
 * ```typescript
 * canBeJungsung(
 *   // 대상 문자
 *   character: string
 * ): boolean
 * ```
 * @example
 * canBeJungsung('ㅏ') // true
 * canBeJungsung('ㅗㅏ') // true
 * canBeJungsung('ㅏㅗ') // false
 * canBeJungsung('ㄱ') // false
 * canBeJungsung('ㄱㅅ') // false
 * canBeJungsung('가') // false
 */
declare function canBeJungsung(character: string): character is (typeof HANGUL_CHARACTERS_BY_MIDDLE_INDEX)[number];
/**
 * @name canBeJongsung
 * @description
 * 인자로 받은 문자가 종성으로 위치할 수 있는 문자인지 검사합니다.
 * ```typescript
 * canBeJongsung(
 *   // 대상 문자
 *   character: string
 * ): boolean
 * ```
 * @example
 * canBeJongsung('ㄱ') // true
 * canBeJongsung('ㄱㅅ') // true
 * canBeJongsung('ㅎㄹ') // false
 * canBeJongsung('가') // false
 * canBeJongsung('ㅏ') // false
 * canBeJongsung('ㅗㅏ') // false
 */
declare function canBeJongsung(character: string): character is (typeof HANGUL_CHARACTERS_BY_LAST_INDEX)[number];
declare function hasValueInReadOnlyStringList<T extends string>(list: readonly T[], value: string): value is T;
declare function hasProperty<T extends object, K extends PropertyKey>(obj: T, key: K): key is K & keyof T;

export { assembleHangul, canBeChosung, canBeJongsung, canBeJungsung, chosungIncludes, combineHangulCharacter, combineVowels, convertQwertyToHangul, convertQwertyToHangulAlphabet, curriedCombineHangulCharacter, disassembleCompleteHangulCharacter, disassembleHangul, disassembleHangulToGroups, getChosung, getFirstConsonants, hangulIncludes, hasBatchim, hasProperty, hasSingleBatchim, hasValueInReadOnlyStringList, josa, removeLastHangulCharacter };
